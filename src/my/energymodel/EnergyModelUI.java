/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EnergyModelUI.java
 *
 * Created on Apr 13, 2013, 2:43:51 PM
 */
package my.energymodel;

import java.awt.*;
import javax.swing.*;
//import java.util.Timer;
//import java.util.TimerTask;
import java.io.*;
import java.text.DecimalFormat;

/**
 *
 * @author PJ
 */
public class EnergyModelUI extends javax.swing.JFrame {
    
    int windSquarePos = 50;
    int windSquarePos1 = 50;
    int demandSquarePos = 50;
    int demandSquarePos1 = 50;
    int demandSquarePos2 = 0;
    int solarPos = 0;
    int nuclearPos = 0;
    int backupPos = 0;
    int unmetPos = 0;
    double excessGeneration = 0;
    double unmetDemand = 0;
    int i=0;
    int x=0;
    int z=0;
    Timer timer;
    double energyDemand[] = new double[8760];
    double windPower[] = new double[8760];
    double solarPower[] = new double[8760];
    double hourlyHeatDemand[] = new double[8760];
    double hourlyElecForHeatDemand[] = new double[8760];
    double hourlySpaceHeatDemand[] = new double[8760];
    double hourlyWaterHeatDemand[] = new double[8760];
    double temperatureData[] = new double[8760];
    double totalGeneration[] = new double[8760];
    double backupUsed[] = new double[8760];
    double unmet[] = new double[8760];
    double storageContent[] = new double[8760];
    double storageChange[] = new double[8760];

    double windCap;
    double solarCap;
    double nuclearCap;
    double backupCapInstalled;
    double backupCapUsed;
    double backupGeneration;
    double demandProfile;
    double totalDemand;
    double heatLossCoefficient;
    double baseTemp;
    double totalHeatDemand;
    double totalDemandInProfile;
    double storageVolume;
    double storageCap;
    double heatPumpCoP = 2.5;
    double hotWaterDemand;
    double transportDemand;
    double industryDemand;
    
    int balanceMarker = 0;
    int supplyMarker = 0;
    int demandMarker = 0;
    
    DecimalFormat twoDForm = new DecimalFormat("#.##");
    DecimalFormat oneDForm = new DecimalFormat("#.#");

    /** Creates new form EnergyModelUI */
    public EnergyModelUI() {
        initComponents();
    }
    
    private void drawPanel() { 
        //for(i=1;i<20;i++){
        //squarePos = i*10; 
        GraphJPanel jPanel = new GraphJPanel(); 
        jPanel.setBackground(new java.awt.Color(255, 255, 255));
        //if(i==0){jPanel1.add(jPanel);}
        jPanel1.add(jPanel);
        
        repaint();
        
        unmetDemandLabel.setText(""+roundTwoDecimals(unmetDemand/1000));
        excessGenerationLabel.setText(""+roundOneDecimals(excessGeneration/1000));
        backupCapUsedLabel.setText(""+roundOneDecimals(backupCapUsed));
        backupGenLabel.setText(""+roundOneDecimals(backupGeneration/1000));
        //i++;
    }
    
    //Code to display graphics using timer
    //public void Reminder(int seconds) {
    //    timer = new Timer();
    //    timer.schedule(new RemindTask(), seconds);
    //	}

    //class RemindTask extends TimerTask {
    //    public void run() {
    //        //System.out.format("Time's up!%n");
            //squarePos = Integer.parseInt(windPower[i]);
    //         drawPanel();
    //         if(i < 8760){
    //             Reminder(10);
    //         }
    //        else{System.out.println("Stopped");}
            //timer.cancel(); //Terminate the timer thread
    //    }
    //}

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        HLCField = new javax.swing.JTextField();
        totalHeatDemandLabel = new javax.swing.JLabel();
        storageVolumeField = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        storageCapField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        windCapField = new javax.swing.JTextField();
        solarCapField = new javax.swing.JTextField();
        appElecDemandField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        nuclearCapField = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        backupCapUsedLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        balanceButton = new javax.swing.JButton();
        balanceButton.setVisible(false);
        backupCapField = new javax.swing.JTextField();
        excessGenerationLabel = new javax.swing.JLabel();
        backupGenLabel = new javax.swing.JLabel();
        unmetDemandLabel = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        supplyButton = new javax.swing.JButton();
        supplyButton.setVisible(false);
        jLabel23 = new javax.swing.JLabel();
        demandButton = new javax.swing.JButton();
        demandButton.setVisible(false);
        jLabel15 = new javax.swing.JLabel();
        runButton = new javax.swing.JButton();
        jLabel21 = new javax.swing.JLabel();
        hotWaterDemandField = new javax.swing.JTextField();
        transportDemandField = new javax.swing.JTextField();
        industrialDemandField = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTabbedPane1.setBackground(new java.awt.Color(255, 255, 255));

        jScrollPane1.setPreferredSize(new java.awt.Dimension(0, 0));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setName(""); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(9000, 60));
        jPanel1.setLayout(new java.awt.BorderLayout());
        jScrollPane1.setViewportView(jPanel1);

        jTabbedPane1.addTab("Visualisation", jScrollPane1);

        getContentPane().add(jTabbedPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(4, 2, 991, 310));

        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        HLCField.setText("4.398");
        jPanel2.add(HLCField, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 80, 79, -1));

        totalHeatDemandLabel.setForeground(new java.awt.Color(153, 153, 153));
        jPanel2.add(totalHeatDemandLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(840, 80, 40, 20));

        storageVolumeField.setText("250");
        jPanel2.add(storageVolumeField, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 150, 79, -1));

        jLabel17.setText("Industrial elec. demand");
        jPanel2.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 170, 160, 20));

        storageCapField.setText("30");
        jPanel2.add(storageCapField, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 150, 79, -1));

        jLabel1.setText("Excess generation ");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 230, 114, 30));

        jLabel12.setText("Back-up capacity used");
        jPanel2.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 230, 160, 30));

        jLabel13.setText("Back-up generation");
        jPanel2.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 280, 114, 30));

        windCapField.setText("140");
        jPanel2.add(windCapField, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 80, 79, -1));

        solarCapField.setText("70");
        jPanel2.add(solarCapField, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 110, 79, -1));

        appElecDemandField.setText("105");
        jPanel2.add(appElecDemandField, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 80, 79, -1));

        jLabel2.setText("Wind");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, 84, -1));

        jLabel24.setText("Space heating");
        jPanel2.add(jLabel24, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 60, 200, 20));

        jLabel14.setForeground(new java.awt.Color(153, 153, 153));
        jLabel14.setText("TWh/yr");
        jPanel2.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 80, 50, 20));

        nuclearCapField.setText("0");
        jPanel2.add(nuclearCapField, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 140, 79, -1));

        jLabel8.setText("GW");
        jPanel2.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 130, 38, -1));

        jLabel4.setText("Unmet demand");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 280, 114, 30));

        jLabel9.setText("TWh/yr");
        jPanel2.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(478, 60, 50, -1));

        jLabel16.setText("       ");
        jPanel2.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 330, -1, -1));

        jLabel19.setText("GWh");
        jPanel2.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 130, 38, -1));

        backupCapUsedLabel.setBackground(new java.awt.Color(255, 255, 255));
        backupCapUsedLabel.setOpaque(true);
        jPanel2.add(backupCapUsedLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 230, 79, 27));

        jLabel3.setText("TWh/yr");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 230, 50, 27));

        jLabel20.setText("Appliances elec. demand");
        jPanel2.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 80, 160, 20));

        jLabel18.setText("GW");
        jPanel2.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 60, 38, -1));

        jLabel5.setText("Solar");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, 84, -1));

        jLabel11.setText("GW");
        jPanel2.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 230, -1, 27));

        balanceButton.setText("Balance");
        balanceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                balanceButtonActionPerformed(evt);
            }
        });
        jPanel2.add(balanceButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        backupCapField.setText("45");
        jPanel2.add(backupCapField, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 170, 79, -1));

        excessGenerationLabel.setBackground(new java.awt.Color(255, 255, 255));
        excessGenerationLabel.setOpaque(true);
        jPanel2.add(excessGenerationLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 230, 79, 27));

        backupGenLabel.setBackground(new java.awt.Color(255, 255, 255));
        backupGenLabel.setOpaque(true);
        jPanel2.add(backupGenLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 280, 79, 26));

        unmetDemandLabel.setBackground(new java.awt.Color(255, 255, 255));
        unmetDemandLabel.setOpaque(true);
        jPanel2.add(unmetDemandLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 280, 79, 26));

        jLabel6.setText("TWh/yr");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 280, 50, 30));

        jLabel22.setText("Hot water demand (heat)");
        jPanel2.add(jLabel22, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 110, 160, 20));

        jLabel10.setText("Storage");
        jPanel2.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(600, 150, 84, -1));

        jLabel7.setText("Nuclear");
        jPanel2.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 140, 84, -1));

        supplyButton.setText("Supply");
        supplyButton.setToolTipText("");
        supplyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supplyButtonActionPerformed(evt);
            }
        });
        jPanel2.add(supplyButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 20, -1, -1));

        jLabel23.setText("Transport elec. demand");
        jPanel2.add(jLabel23, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 140, 160, 20));

        demandButton.setText("Demand");
        demandButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                demandButtonActionPerformed(evt);
            }
        });
        jPanel2.add(demandButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 20, -1, -1));

        jLabel15.setText("Back-up capacity installed");
        jPanel2.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 170, 170, -1));

        runButton.setBackground(new java.awt.Color(0, 204, 51));
        runButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        runButton.setText("Run");
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });
        jPanel2.add(runButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 10, -1, 40));

        jLabel21.setText("TWh/yr");
        jPanel2.add(jLabel21, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 280, 50, 30));

        hotWaterDemandField.setText("96");
        jPanel2.add(hotWaterDemandField, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 110, 79, -1));

        transportDemandField.setText("42");
        jPanel2.add(transportDemandField, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 140, 79, -1));

        industrialDemandField.setText("171");
        jPanel2.add(industrialDemandField, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 170, 79, -1));

        jLabel25.setText("Heat loss coeff (GW/degC)");
        jPanel2.add(jLabel25, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 80, 200, 20));

        jScrollPane2.setViewportView(jPanel2);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 310, 1000, 330));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        balanceButton.setVisible(true);supplyButton.setVisible(true);demandButton.setVisible(true);
        balanceMarker = 1; supplyMarker = 0; demandMarker = 0;
        totalDemand = Double.parseDouble(appElecDemandField.getText());
        heatLossCoefficient = Double.parseDouble(HLCField.getText());
        baseTemp = 16-(385/((heatLossCoefficient/4.398)*119));//Gains need linking to appliances energy reduction 
        totalDemandInProfile = 0;
        windCap = Double.parseDouble(windCapField.getText());
        solarCap = Double.parseDouble(solarCapField.getText());
        nuclearCap = Double.parseDouble(nuclearCapField.getText());
        backupCapInstalled = Double.parseDouble(backupCapField.getText());
        storageVolume = Double.parseDouble(storageVolumeField.getText());
        storageCap = Double.parseDouble(storageCapField.getText());
        storageContent[0] = storageVolume/2;
        excessGeneration = 0;
        unmetDemand = 0;
        backupCapUsed = 0;
        backupGeneration = 0;
        x = 0;
        hotWaterDemand = (Double.parseDouble(hotWaterDemandField.getText())*1000/8760);
        transportDemand = Double.parseDouble(transportDemandField.getText())*1000/8760;
        industryDemand = Double.parseDouble(industrialDemandField.getText())*1000/8760;
        try{
          // Open the file that is the first 
          // command line parameter
          //FileInputStream fstream = new FileInputStream("textfile.txt");
          // Get the object of DataInputStream
          //DataInputStream in = new DataInputStream(fstream);
          BufferedReader br = new BufferedReader(new FileReader("textfile.txt"));
          String strLine;
          strLine = br.readLine();
          //Read File Line By Line
          while (strLine != null)   {
          // Print the content on the console
          //System.out.println (strLine);
          String splitarray[] = strLine.split(",");
          energyDemand[x] = Double.parseDouble(splitarray[0]);
          windPower[x] = Double.parseDouble(splitarray[1])*windCap;
          solarPower[x] = Double.parseDouble(splitarray[2])*solarCap;
          temperatureData[x] = Double.parseDouble(splitarray[3]);
          if(baseTemp - temperatureData[x] > 0){
              hourlyHeatDemand[x] = ((baseTemp - temperatureData[x]) * heatLossCoefficient) + hotWaterDemand;
          }
          else{
              hourlyHeatDemand[x] = hotWaterDemand;
          }
          //System.out.println(""+windPower[x]);
          
          x++;
          strLine = br.readLine();
          }
          //Close the input stream
          //in.close();
          }
          catch (Exception e){//Catch exception if any
          System.err.println("Error: " + e.getMessage());
          }
        
          for(i=0;i<8760;i++){
              totalDemandInProfile += energyDemand[i];
              totalHeatDemand += hourlyHeatDemand[i];
              hourlyElecForHeatDemand[i] = hourlyHeatDemand[i] / heatPumpCoP;    
          }
          totalHeatDemandLabel.setText(""+(int)Math.round(totalHeatDemand/1000));
          totalHeatDemand = 0;
          
          for(i=0;i<8760;i++){
              energyDemand[i] = energyDemand[i] / (totalDemandInProfile/1000) * totalDemand;
              energyDemand[i] = energyDemand[i] + hourlyElecForHeatDemand[i] + transportDemand + industryDemand;
              totalGeneration[i] = windPower[i] + solarPower[i] + (nuclearCap*0.9);
              // If demand greater than supply take from store
              if(energyDemand[i]>totalGeneration[i]){
                  if(storageContent[i]<storageCap){
                      if(storageContent[i]<(energyDemand[i]-totalGeneration[i])){
                          storageChange[i] = -storageContent[i];
                      }
                      else{storageChange[i] = -(energyDemand[i]-totalGeneration[i]);}
                  }
                  else if(storageCap<(energyDemand[i]-totalGeneration[i])){
                          storageChange[i] = -storageCap;
                  }
                  else{storageChange[i] = -(energyDemand[i]-totalGeneration[i]);}
              }
              // Is supply greater than demand give to store
              if(energyDemand[i]<=totalGeneration[i]){
                  if((storageVolume-storageContent[i])<storageCap){
                      if((storageVolume-storageContent[i])<(totalGeneration[i]-energyDemand[i])){
                          storageChange[i] = (storageVolume-storageContent[i]);
                      }
                      else{storageChange[i] = (totalGeneration[i]-energyDemand[i]);}
                  }
                  else if(storageCap<(totalGeneration[i]-energyDemand[i])){
                          storageChange[i] = storageCap;
                  }
                  else{storageChange[i] = (totalGeneration[i]-energyDemand[i]);}
              }
              //Adjust storage content
              if(i<8759){storageContent[i+1] = storageContent[i] + storageChange[i];}
              energyDemand[i] = energyDemand[i] + storageChange[i];
          }
          //Calculate backup generation and unmet demand
          for(i=0;i<8760;i++){
              if(energyDemand[i]>totalGeneration[i]){
                  if((energyDemand[i]-totalGeneration[i])<backupCapInstalled){
                      backupGeneration += (energyDemand[i]-totalGeneration[i]);
                      backupUsed[i] = (energyDemand[i]-totalGeneration[i]);
                      unmet[i] = 0;
                      if((energyDemand[i]-totalGeneration[i])>backupCapUsed){
                          backupCapUsed = (energyDemand[i]-totalGeneration[i]);
                      }
                  }
                  else{
                      backupGeneration += backupCapInstalled;
                      backupUsed[i] = backupCapInstalled;
                      unmetDemand += ((energyDemand[i]-totalGeneration[i]) - backupCapInstalled);
                      unmet[i] = ((energyDemand[i]-totalGeneration[i]) - backupCapInstalled);
                      backupCapUsed = backupCapInstalled;
                  }
              }
              else{
                  excessGeneration += (totalGeneration[i] - energyDemand[i]);
                  backupUsed[i] = 0;
                  unmet[i] = 0;
              }
          }
          
          //Reminder(10);  
          drawPanel();
    }//GEN-LAST:event_runButtonActionPerformed

    private void demandButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_demandButtonActionPerformed
        balanceMarker = 0; supplyMarker = 0; demandMarker = 1;
        drawPanel();
    }//GEN-LAST:event_demandButtonActionPerformed

    private void balanceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_balanceButtonActionPerformed
        balanceMarker = 1; supplyMarker = 0; demandMarker = 0;
        drawPanel(); 
    }//GEN-LAST:event_balanceButtonActionPerformed

    private void supplyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supplyButtonActionPerformed
        balanceMarker = 0; supplyMarker = 1; demandMarker = 0;
        drawPanel();
    }//GEN-LAST:event_supplyButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EnergyModelUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EnergyModelUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EnergyModelUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EnergyModelUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new EnergyModelUI().setVisible(true);
            }
        });
    }
    
    double roundTwoDecimals(double d) {
	return Double.valueOf(twoDForm.format(d));
    }

    // Rounds to one decimal places
    double roundOneDecimals(double d) {        	
	return Double.valueOf(oneDForm.format(d));
    }
    
    public class GraphJPanel extends JPanel{
        // draw shapes with Java 2D API
        
        @Override
        public void paintComponent( Graphics g )
        {
            super.paintComponent( g ); // call superclass's paintComponent

            Graphics2D g2d = ( Graphics2D ) g; // cast g to Graphics2D
            
            g.setColor(Color.black);
            g2d.drawLine(25, 25, 25, 225);
            g2d.drawLine(25, 225, 8785, 225);           
            // Draw balance graph
            if(balanceMarker == 1){
                for(int p=1;p<8760;p++){
                    g.setColor(Color.blue);
                    windSquarePos = (int)Math.round(totalGeneration[p-1]);
                    windSquarePos1 = (int)Math.round(totalGeneration[p]);
                    //g2d.fillRect(p+26, 25+(200-squarePos), 1, 2);
                    g2d.drawLine(p+26, 25+(200-windSquarePos1), p+25, 25+(200-windSquarePos));
                    g.setColor(Color.black);
                    demandSquarePos = (int)Math.round(energyDemand[p-1]);
                    demandSquarePos1 = (int)Math.round(energyDemand[p]);
                    //g2d.fillRect(p+26, 25+(200-squarePos), 1, 2);
                    g2d.drawLine(p+26, 25+(200-demandSquarePos1), p+25, 25+(200-demandSquarePos));
                    if(windSquarePos>demandSquarePos){
                        g.setColor(Color.green);
                        g2d.drawLine(p+25, 25+(200-windSquarePos+1), p+25, 25+(200-demandSquarePos-1));
                    }
                    else if(windSquarePos<demandSquarePos){
                        g.setColor(Color.red);
                        g2d.drawLine(p+25, 25+(200-windSquarePos-1), p+25, 25+(200-demandSquarePos+1));
                    }
                }
            }
            //Draw demand graph
            else if(demandMarker == 1){
                for(int p=1;p<8760;p++){
                    g.setColor(Color.blue);
                    demandSquarePos = (int)Math.round(energyDemand[p-1]);
                    //demandSquarePos1 = (int) energyDemand[p];
                    g2d.drawLine(p+25, 25+(200-demandSquarePos), p+25, 225);
                    
                    g.setColor(Color.red);
                    demandSquarePos = (int)Math.round(hourlyElecForHeatDemand[p-1]);
                    g2d.drawLine(p+25, 25+(200-demandSquarePos), p+25, 225);
                    g.setColor(Color.orange);
                    demandSquarePos1 = (int) transportDemand;
                    g2d.drawLine(p+25, 25+(200-demandSquarePos), p+25, 25+(200-(demandSquarePos+demandSquarePos1)));
                    g.setColor(Color.magenta);
                    demandSquarePos2 = (int) industryDemand;
                    g2d.drawLine(p+25, 25+(200-(demandSquarePos+demandSquarePos1)), p+25, 25+(200-(demandSquarePos+demandSquarePos1+demandSquarePos2)));
                    g.setColor(Color.black);
                    g2d.drawLine(25, 225, 8785, 225); 
                    
                    demandSquarePos = (int)Math.round(energyDemand[p-1]);
                    if(storageChange[p-1]<0){
                        g.setColor(Color.pink);
                        g2d.drawLine(p+25, 25+(200-demandSquarePos+((int)Math.round(storageChange[p-1]))), p+25, 25+(200-demandSquarePos));   
                    }
                    else if(storageChange[p-1]>0){
                        g.setColor(Color.yellow);
                        g2d.drawLine(p+25, 25+(200-demandSquarePos+((int)Math.round(storageChange[p-1]))), p+25, 25+(200-demandSquarePos));
                    }
                }
            }
            //Draw supply graph 
            else if(supplyMarker == 1){
                for(int p=1;p<8760;p++){
                    g.setColor(Color.green);
                    windSquarePos = (int)Math.round(windPower[p-1]);
                    solarPos = (int)Math.round(solarPower[p-1]);
                    nuclearPos = (int)Math.round((nuclearCap * 0.9));
                    backupPos = (int)Math.round(backupUsed[p-1]);
                    unmetPos = (int)Math.round(unmet[p-1]);
                    g.setColor(Color.orange);
                    g2d.drawLine(p+25, 25+(200-nuclearPos), p+25, 225);
                    g.setColor(Color.yellow);
                    g2d.drawLine(p+25, 25+(200-nuclearPos)-solarPos, p+25, 25+(200-nuclearPos));                    
                    g.setColor(Color.gray);
                    g2d.drawLine(p+25, 25+(200-nuclearPos)-solarPos-windSquarePos-backupPos-unmetPos, p+25, 25+(200-nuclearPos)-solarPos-windSquarePos-backupPos);
                    g.setColor(Color.red);
                    g2d.drawLine(p+25, 25+(200-nuclearPos)-solarPos-windSquarePos-backupPos, p+25, 25+(200-nuclearPos)-solarPos-windSquarePos);
                    g.setColor(Color.blue);
                    g2d.drawLine(p+25, 25+(200-nuclearPos)-solarPos-windSquarePos, p+25, 25+(200-nuclearPos)-solarPos);
                    g.setColor(Color.black);
                    g2d.drawLine(25, 225, 8785, 225); 
                }
            }
        }      
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField HLCField;
    private javax.swing.JTextField appElecDemandField;
    private javax.swing.JTextField backupCapField;
    private javax.swing.JLabel backupCapUsedLabel;
    private javax.swing.JLabel backupGenLabel;
    private javax.swing.JButton balanceButton;
    private javax.swing.JButton demandButton;
    private javax.swing.JLabel excessGenerationLabel;
    private javax.swing.JTextField hotWaterDemandField;
    private javax.swing.JTextField industrialDemandField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField nuclearCapField;
    private javax.swing.JButton runButton;
    private javax.swing.JTextField solarCapField;
    private javax.swing.JTextField storageCapField;
    private javax.swing.JTextField storageVolumeField;
    private javax.swing.JButton supplyButton;
    private javax.swing.JLabel totalHeatDemandLabel;
    private javax.swing.JTextField transportDemandField;
    private javax.swing.JLabel unmetDemandLabel;
    private javax.swing.JTextField windCapField;
    // End of variables declaration//GEN-END:variables
}
